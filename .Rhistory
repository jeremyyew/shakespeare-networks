min=10,
label=list(enabled=TRUE,
drawThreshold=10,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE,
scaling=list(max=10, min=1),
selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE, hover=TRUE),
selectedBy = "gender") %>%
visInteraction(navigationButtons=TRUE,
tooltipDelay=150,
tooltipStyle="position: fixed;
padding: 10px;
white-space: nowrap;
font-family: Helvetica Neue,Helvetica,Arial,sans-serif;
font-size: 14px;
background-color: rgb(255, 255, 255);                                                border-radius: 5px;
color: rgb(86, 86, 86);
box-shadow: rgba(0, 0, 0, 0.3) 5px 5px 20px;")
visSave(g, paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
# Draw graph
drawNetwork <- function(play, nodes, edges, layout, color) {
palette <- brewer.pal(8, color)
g <- visNetwork(nodes, edges,
width="100%",
) %>%
visNodes(shadow = list(enabled = TRUE,
size = 20),
color="blue",
font=list(color=greys[7], face='Roboto'),
scaling=list(max=60,
min=10,
label=list(enabled=TRUE,
drawThreshold=10,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE,
scaling=list(max=10, min=1),
selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE, hover=TRUE),
selectedBy = "gender") %>%
visInteraction(navigationButtons=TRUE,
tooltipDelay=150,
tooltipStyle="position: fixed;
padding: 10px;
white-space: nowrap;
font-family: Helvetica Neue,Helvetica,Arial,sans-serif;
font-size: 14px;
background-color: rgb(255, 255, 255);                                                border-radius: 5px;
color: rgb(86, 86, 86);
box-shadow: rgba(0, 0, 0, 0.3) 5px 5px 20px;")
visSave(g, paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
playlist <- c("Much Ado About Nothing","The Tempest","Romeo and Juliet", "Hamlet", "Macbeth", "Merchant of Venice")
colors <- c("Reds", "Blues", "Purples", "Oranges", "Greens", "Greys")
data <-vector("list", 6)
server <- function(input, output) {
lapply(seq(length(playlist)), function(i) {
print(playlist[i])
# Process data
data[[i]] <- process_play(playlist[i], colors[i])
output[[playlist[i]]] <- renderVisNetwork({
# Draw and save graphs
g <- drawNetwork(playlist[i], data[[i]]$nodes, data[[i]]$edges, "layout_with_lgl", colors[i])
return(g)
})
observe({
print(paste("observed", playlist[i]))
visNetworkProxy(playlist[i]) %>%
visNodes(color = input$color)
})
})
}
ui <- fluidPage(
titlePanel("Shakespeare's Plays: Network visualization of interactions"),
sidebarLayout(
sidebarPanel(
selectInput("color", "Color :",
c("blue", "red", "green"))
),
mainPanel(
tabsetPanel(
tabPanel(playlist[1], visNetworkOutput(playlist[1])),
tabPanel(playlist[2], visNetworkOutput(playlist[2])),
tabPanel(playlist[3], visNetworkOutput(playlist[3])),
tabPanel(playlist[4], visNetworkOutput(playlist[4])),
tabPanel(playlist[5], visNetworkOutput(playlist[5])),
tabPanel(playlist[6], visNetworkOutput(playlist[6]))
),
div(HTML(footerHtmlShiny), style=boxStyleShiny)
),
)
)
shinyApp(ui = ui, server = server)
playlist <- c("Much Ado About Nothing","The Tempest","Romeo and Juliet", "Hamlet", "Macbeth", "Merchant of Venice")
colors <- c("Reds", "Blues", "Purples", "Oranges", "Greens", "Greys")
playlist <- c("Much Ado About Nothing","The Tempest","Romeo and Juliet", "Hamlet", "Macbeth", "Merchant of Venice")
colors <- c("Reds", "Blues", "Purples", "Oranges", "Greens", "Greys")
data <-vector("list", 6)
graphs <-vector("list", 6)
server <- function(input, output) {
lapply(seq(length(playlist)), function(i) {
print(playlist[i])
# Process data
data[[i]] <- process_play(playlist[i], colors[i])
output[[playlist[i]]] <- renderVisNetwork({
# Draw and save graphs
g[[i]] <- drawNetwork(playlist[i], data[[i]]$nodes, data[[i]]$edges, "layout_with_lgl", colors[i])
return(g[[i]])
})
observe({
print(paste("observed", playlist[i]))
nodes <- data[[i]]$nodes
nodes$colors=c(input$color)
visNetworkProxy(playlist[i]) %>%
visUpdateNodes(g[[i]], nodes)
})
})
}
ui <- fluidPage(
titlePanel("Shakespeare's Plays: Network visualization of interactions"),
sidebarLayout(
sidebarPanel(
selectInput("color", "Color :",
c("blue", "red", "green"))
),
mainPanel(
tabsetPanel(
tabPanel(playlist[1], visNetworkOutput(playlist[1])),
tabPanel(playlist[2], visNetworkOutput(playlist[2])),
tabPanel(playlist[3], visNetworkOutput(playlist[3])),
tabPanel(playlist[4], visNetworkOutput(playlist[4])),
tabPanel(playlist[5], visNetworkOutput(playlist[5])),
tabPanel(playlist[6], visNetworkOutput(playlist[6]))
),
div(HTML(footerHtmlShiny), style=boxStyleShiny)
),
)
)
shinyApp(ui = ui, server = server)
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
display.brewer.all()
gender_colors <- brewer.pal(9, "Set2")[3:4]
gender_colors <- brewer.pal(8, "Set2")[3:4]
gender_colors
gender_colors <- brewer.pal(8, "Set2")
M_COLOR <- gender_colors[3]
F_COLOR <- gender_colors[4]
M_COLOR <- gender_colors[3]
F_COLOR <- gender_colors[4]
gender_to_color <- list(M=M_COLOR, "F"=F_COLOR)
gender_to_color
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
cd
ls
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
rsconnect::setAccountInfo(name='jeremyyew',
token='73CD848485C638B87EE2A657BFCACFB5',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jeremyyew',
token='73CD848485C638B87EE2A657BFCACFB5',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jeremyyew',
token='73CD848485C638B87EE2A657BFCACFB5',
secret='I6vBcAOjuaLx1Wfd07B0sh/X65RRG9hkfBOk0biT')
runApp('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareNetworkShinyApp.R')
setwd('~/Dropbox/AMTH160 Structure of Networks/Project')
runApp('ShakespeareNetworkShinyApp.R')
runApp('ShakespeareNetworkShinyApp.R')
# Get data
all_lines <- read.csv("Shakespeare_data.csv", na.strings=c(""," ","NA"), stringsAsFactors = FALSE)
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
runApp('ShakespeareNetworkShinyApp.R')
runApp()
player_atts
player_atts
View(player_atts)
View(player_atts)
player_atts_data <- read.csv("data/players.csv", na.strings=c(""," ","NA"), stringsAsFactors = FALSE)
player_atts_data <- read.csv("data/players.csv", na.strings=c(""," ","NA"), stringsAsFactors = FALSE)
View(player_atts_data)
View(player_atts_data)
help(match)
help(merge)
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"))
player_atts
# Get lines per player, gender, etc to be mapped later
player_atts <- six_plays %>% count(Play, Player, name="lines")
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"))
# Get lines per player, gender, etc to be mapped later
player_atts <- six_plays %>% count(Play, Player, name="lines")
View(player_atts)
View(player_atts)
# Get lines per player, gender, etc to be mapped later
player_atts <- six_plays %>% count(Play, Player, name="lines")
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts_merged <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"))
# Get lines per player, gender, etc to be mapped later
player_atts <- six_plays %>% count(Play, Player, name="lines")
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts_merged <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"))
View(player_atts)
View(player_atts_data)
View(player_atts_data)
View(player_atts_merged)
player_atts_data <- subset(player_atts_data, select = -c("X"))
player_atts_data <- read.csv("data/players.csv", na.strings=c(""," ","NA"), stringsAsFactors = FALSE)
player_atts_data <- subset(player_atts_data, select = -c("X"))
help(subset)
player_atts_data <- subset(player_atts_data, select = -c(1))
player_atts_data <- read.csv("data/players.csv", na.strings=c(""," ","NA"), stringsAsFactors = FALSE)
player_atts_data <- subset(player_atts_data, select = -c(1))
# Filter by play name to get lines only from 6 plays, and remove the "All" character chorus
six_plays <- all_lines[all_lines$Play %in% c("Much Ado about nothing", "The Tempest", "Romeo and Juliet", "Hamlet", "macbeth", "Merchant of Venice"), ] %>% filter(!(Player %in% c("ALL", "All")))
# Rename values so it looks cleaner
six_plays$Play <- mapvalues(six_plays$Play, from=c("Much Ado about nothing", "macbeth"), to=c("Much Ado About Nothing", "Macbeth"), warn_missing = TRUE)
# Split ActSceneLine into three cols
six_plays <- six_plays %>% drop_na(ActSceneLine) %>% separate(ActSceneLine, c("Act", "Scene", "Line"))
# Group by scene and player name
players_per_scene <- six_plays %>% group_by(Play, Act, Scene) %>% distinct(Player)
# Get lines per player, gender, etc to be mapped later
player_atts <- six_plays %>% count(Play, Player, name="lines")
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts_merged <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"))
player_atts_merged
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts_merged <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"), all=FALSE)
# Get lines per player, gender, etc to be mapped later
player_atts <- six_plays %>% count(Play, Player, name="lines")
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts_merged <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"), all=FALSE)
# Filter by play name to get lines only from 6 plays, and remove the "All" character chorus
six_plays <- all_lines[all_lines$Play %in% c("Much Ado about nothing", "The Tempest", "Romeo and Juliet", "Hamlet", "macbeth", "Merchant of Venice"), ] %>% filter(!(Player %in% c("ALL", "All")))
# Rename values so it looks cleaner
six_plays$Play <- mapvalues(six_plays$Play, from=c("Much Ado about nothing", "macbeth"), to=c("Much Ado About Nothing", "Macbeth"), warn_missing = TRUE)
# Split ActSceneLine into three cols
six_plays <- six_plays %>% drop_na(ActSceneLine) %>% separate(ActSceneLine, c("Act", "Scene", "Line"))
# Group by scene and player name
players_per_scene <- six_plays %>% group_by(Play, Act, Scene) %>% distinct(Player)
# Get lines per player, gender, etc to be mapped later
player_atts <- six_plays %>% count(Play, Player, name="lines")
View(player_atts)
# Get lines per player, gender, etc to be mapped later
player_atts <- six_plays %>% count(Play, Player, name="lines")
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts_merged <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"), all.x=TRUE)
# Group by scene and player name
players_per_scene <- six_plays %>% group_by(Play, Act, Scene) %>% distinct(Player)
# Get lines per player, gender, etc to be mapped later
player_atts <- six_plays %>% count(Play, Player, name="lines")
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts_merged <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"), all.x=TRUE)
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"), all.x=TRUE)
# Get lines per player, gender, etc to be mapped later
player_atts <- six_plays %>% count(Play, Player, name="lines")
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"), all.x=TRUE)
process_play <- function(play, color){
# Get color ramp palette
palette <- brewer.pal(9, color)
palette <-colorRampPalette(c(palette[2], palette[8]), alpha=TRUE)
# Get player_atts and players_per_scene for this one play
players_per_scene <- players_per_scene %>% filter(Play == play)
player_atts <- player_atts %>% filter(Play==play)
#View(one_play)
# We need to constantly set strings as factors as false, otherwise we lose the string data
edges <- data.frame(from=character(), to=character(), value=integer(), stringsAsFactors = FALSE)
compute_interactions <- function(grp, key) {
# We need to leave out scenes with only 1 member because we can't generate interactions from that
if (length(grp$Player)< 2) {
return()
}
# Generate all pairs
pairs <- combn(grp$Player, 2)
# Increment pair value if they exist, else add new pair
for (i in 1: ncol(pairs)){
x <- pairs[1, i]
y <- pairs[2, i]
# We need to check whether it currently exists as (x,y) or (y,x) in edges
a <- subset(edges, from==x & to==y)
b <- subset(edges, from==y & to==x)
if (length(rownames(a)) > 0 | length(rownames(b)) > 0) {
if (length(rownames(a)) > 0) {
b <- a
}
#Add new weight.
# Note we need to use <<- to ensure side effects are real.
edges[rownames(b)[1],"value"] <<- edges[rownames(b)[1],"value"] + 1
} else {
edges <<- rbind(edges, data.frame(from=c(x), to=c(y), value=c(1), stringsAsFactors = FALSE))
}
}
}
players_per_scene %>% group_walk(compute_interactions)
# players_per_scene %>% group_walk(compute_interactions)
# Get unique players list
players <- unique(data.frame(c(edges$from, edges$to), stringsAsFactors = FALSE))[, 1]
# Create nodes df
nodes <- data.frame(id=players, label=players)
# Set node size by degree (number of connected members)
g <-graph_from_data_frame(edges, directed = FALSE)
degrees <- degree(g)
nodes$value <- degrees[match(nodes$id, names(degrees))]
# Set node color intensity by total number of lines in play
# players_per_scene %>% filter(Play == play)
nodes$lines <- player_atts$lines[match(nodes$id, player_atts$Player)]
MAX_LINES= max(nodes$lines)
nodes$color_by_lines <- palette(MAX_LINES)[nodes$lines]
nodes$color <- nodes$color_by_lines
# For each node, get total weight of all edges
total_weight <- strength(g, weights=edges$value)
nodes$total_weight <- total_weight[match(nodes$id, names(total_weight))]
# MAX_NODE_WEIGHT = max(nodes$total_weight)
# nodes$color <- palette(MAX_NODE_WEIGHT)[nodes$total_weight]
# Set edge color intensity by weight (width already set via edges$value)
MAX_EDGE_VALUE = max(edges$value)
edges$color_by_weight <- palette(MAX_EDGE_VALUE)[edges$value]
greyPalette <- colorRampPalette(c(greys[2], greys[8]), alpha=TRUE)
edges$color_by_gender <- greyPalette(MAX_EDGE_VALUE)[edges$value]
edges$color <- edges$color_by_weight
# Set group by gender
nodes$gender <- player_atts$gender[match(nodes$id, player_atts$Player)]
# Get node color by gender
nodes$color_by_gender <- gender_to_color[match(nodes$gender, names(gender_to_color))]
# insert tooltip text for nodes and edges
nodes$title <- paste("<b>", nodes$label, "</b>",
"<br><b>Number of Lines:</b>", nodes$lines,
"<br><b>Number of Edges:</b>", nodes$value,
"<br><b>Total Edge Weight:</b>", nodes$total_weight
)
edges$title <- paste("<b>", edges$from, " and ", edges$to, "<b>", "<br><b>Weight:</b>", edges$value)
return(list(edges=edges, nodes=nodes))
}
footerHtml <- list(text=paste("<br><br><br>",
"<b>Edge Weight:</b> Represents number of scenes two characters appear together in. <br>Mapped to edge size and color intensity.<br><br>",
"<b>Number of Lines:</b> Represents total number of lines in play. <br>Mapped to node color intensity.<br><br>",
"<b>Number of Edges:</b> Number of edges. Represents number of other characters that they interact with (i.e. appear in the same scene with at least once). <br>Mapped to node size.<br><br>",
"<b>Total Edge Weight:</b> Sum of weights of all edges. Represents total number of times they interact with other characters (i.e. number of times they appear in the same scene with each character).<br><br>", sep=""
),
style="text-align:left;
font-size: 12px;
font-family:Helvetica Neue,Helvetica,Arial,sans-serif;")
# Draw graph
drawNetwork <- function(play, nodes, edges, layout, color) {
palette <- brewer.pal(8, color)
g <- visNetwork(nodes, edges,
width="100%",
) %>%
visNodes(shadow = list(enabled = TRUE,
size = 15),
font=list(color=greys[7], face='Roboto'),
scaling=list(max=60,
min=10,
label=list(enabled=TRUE,
drawThreshold=10,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE,
scaling=list(max=10, min=1),
selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE),
selectedBy = "gender") %>%
visInteraction(navigationButtons=TRUE,
tooltipDelay=150,
tooltipStyle="position: fixed;
padding: 10px;
white-space: nowrap;
font-family: Helvetica Neue,Helvetica,Arial,sans-serif;
font-size: 14px;
background-color: rgb(255, 255, 255);                                                border-radius: 5px;
color: rgb(86, 86, 86);
box-shadow: rgba(0, 0, 0, 0.3) 5px 5px 20px;")
# visSave(g, paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
footerHtmlShiny <-paste("<b>Edge Weight:</b> Represents number of scenes two characters appear together in. <br>Mapped to edge size and color intensity.<br><br>",
"<b>Number of Lines:</b> Represents total number of lines in play. <br>Mapped to node color intensity.<br><br>",
"<b>Number of Edges:</b> Number of edges. Represents number of other characters that they interact with (i.e. appear in the same scene with at least once). <br>Mapped to node size.<br><br>",
"<b>Total Edge Weight:</b> Sum of weights of all edges. Represents total number of times they interact with other characters (i.e. number of times they appear in the same scene with each character).<br><br>", sep=""
)
boxStyleShiny <- "
min-height: 20px;
padding: 19px;
margin-bottom: 20px;
background-color: #f5f5f5;
border: 1px solid #e3e3e3;
border-radius: 4px;
-webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.05);
box-shadow: inset 0 1px 1px rgba(0,0,0,.05);"
runApp()
runApp()
help(match)
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"), all.x=TRUE)
player_atts$Gender[is.na(player_atts$Gender) & player_atts$Play=="Merchant of Venice"] <- c("M")
player_atts$Gender[is.na(player_atts$Gender) & player_atts$Play=="Merchant of Venice",] <- c("M")
player_atts$Gender[is.na(player_atts$Gender) & player_atts$Play=="Merchant of Venice",]
player_atts$Gender[is.na(player_atts$Gender),]
help(is.na)
is.na(player_atts$Gender)
library(plyr)
library(dplyr)
library(tidyverse)
# Need to setwd programatically because the visSave function cant do relative paths otherwise
# setwd("~/Dropbox/AMTH160 Structure of Networks/Project/output")
# Get color palettes
# display.brewer.all()
greys <- brewer.pal(8, "Greys")
gender_colors <- brewer.pal(8, "Set2")
M_COLOR <- gender_colors[3]
F_COLOR <- gender_colors[4]
gender_to_color <- list(M=M_COLOR, "F"=F_COLOR)
# Get data
all_lines <- read.csv("data/Shakespeare_data.csv", na.strings=c(""," ","NA"), stringsAsFactors = FALSE)
player_atts_data <- read.csv("data/players.csv", na.strings=c(""," ","NA"), stringsAsFactors = FALSE)
player_atts_data <- subset(player_atts_data, select = -c(1))
# Filter by play name to get lines only from 6 plays, and remove the "All" character chorus
six_plays <- all_lines[all_lines$Play %in% c("Much Ado about nothing", "The Tempest", "Romeo and Juliet", "Hamlet", "macbeth", "Merchant of Venice"), ] %>% filter(!(Player %in% c("ALL", "All")))
# Rename values so it looks cleaner
six_plays$Play <- mapvalues(six_plays$Play, from=c("Much Ado about nothing", "macbeth"), to=c("Much Ado About Nothing", "Macbeth"), warn_missing = TRUE)
# Split ActSceneLine into three cols
six_plays <- six_plays %>% drop_na(ActSceneLine) %>% separate(ActSceneLine, c("Act", "Scene", "Line"))
# Group by scene and player name
players_per_scene <- six_plays %>% group_by(Play, Act, Scene) %>% distinct(Player)
# Get lines per player, gender, etc to be mapped later
player_atts <- six_plays %>% count(Play, Player, name="lines")
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"), all.x=TRUE)
player_atts$Gender[is.na(player_atts$Gender),] <- c("M")
player_atts$Gender[is.na(player_atts$Gender),]
player_atts$Gender[is.na(player_atts$Gender)]
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"), all.x=TRUE)
# Get lines per player, gender, etc to be mapped later
player_atts <- six_plays %>% count(Play, Player, name="lines")
# player_atts$gender <- rep_len(c("M", "F"), nrow(player_atts))
player_atts <- merge(player_atts, player_atts_data, by.x=c("Play", "Player"), by.y=c("Play", "Player"), all.x=TRUE)
player_atts$Gender[is.na(player_atts$Gender)] <- c("M")
U_COLOR <- greys[4]
gender_to_color <- list(M=M_COLOR, "F"=F_COLOR, "NA"=U_COLOR)
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
runApp()
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
runApp()
# Replace NA gender with "U"
player_atts$Gender[is.na(player_atts$Gender)] <- c("U")
# Replace NA gender with "U"
player_atts$Gender[is.na(player_atts$Gender)] <- c("U")
names(player_atts)
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
runApp()
display.brewer.all()
display.brewer.all()
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
runApp()
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
source('~/Dropbox/AMTH160 Structure of Networks/Project/ShakespeareVisnetwork-140419.R', echo=TRUE)
runApp()
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
