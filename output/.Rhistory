main=list(text=paste("Shakespeare's ", play,
": a network visualization", sep=""),
style=paste("font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;color:", palette[8], ";", sep="")
)) %>%
visNodes(shadow = list(enabled = TRUE, size = 20),
font=list(color=greys[7], face='georgia'),
scaling=list(max=60,
min=10,
label=list(enabled=TRUE,
drawThreshold=10,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE, scaling=list(max=15, min=1),selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE, hover=TRUE)) %>%
visSave(g, paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
# Draw and save all graphs
for (i in seq(length(playlist))) {
print(playlist[i])
data <- play_data[[i]]
g <- draw(playlist[i], data$nodes, data$edges, "layout_with_lgl", colors[i])
print(g)
}
# Process all data
for (i in seq(length(playlist))) {
print(playlist[i])
play_data[[i]] <- process_play(playlist[i], colors[i])
}
# Draw and save all graphs
for (i in seq(length(playlist))) {
print(playlist[i])
data <- play_data[[i]]
g <- draw(playlist[i], data$nodes, data$edges, "layout_with_lgl", colors[i])
print(g)
}
# Draw graph
draw <- function(play, nodes, edges, layout, color) {
palette <- brewer.pal(8, color)
g <- visNetwork(nodes, edges,
width="100%",
main=list(text=paste("Shakespeare's ", play,
": a network visualization", sep=""),
style=paste("font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;color:", palette[8], ";", sep="")
)) %>%
visNodes(shadow = list(enabled = TRUE, size = 20),
font=list(color=greys[7], face='georgia'),
scaling=list(max=60,
min=10,
label=list(enabled=TRUE,
drawThreshold=10,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE, scaling=list(max=15, min=1),selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE, hover=TRUE)) %>%
visSave(paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
# Draw graph
draw <- function(play, nodes, edges, layout, color) {
palette <- brewer.pal(8, color)
g <- visNetwork(nodes, edges,
width="100%",
main=list(text=paste("Shakespeare's ", play,
": a network visualization", sep=""),
style=paste("font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;color:", palette[8], ";", sep="")
)) %>%
visNodes(shadow = list(enabled = TRUE, size = 20),
font=list(color=greys[7], face='georgia'),
scaling=list(max=60,
min=10,
label=list(enabled=TRUE,
drawThreshold=10,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE, scaling=list(max=15, min=1),selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE, hover=TRUE))
visSave(g, paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
# Draw graph
draw <- function(play, nodes, edges, layout, color) {
palette <- brewer.pal(8, color)
g <- visNetwork(nodes, edges,
width="100%",
main=list(text=paste("Shakespeare's ", play,
": a network visualization", sep=""),
style=paste("font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;color:", palette[8], ";", sep="")
)) %>%
visNodes(shadow = list(enabled = TRUE, size = 20),
font=list(color=greys[7], face='georgia'),
scaling=list(max=60,
min=10,
label=list(enabled=TRUE,
drawThreshold=10,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE, scaling=list(max=15, min=1),selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE, hover=TRUE)) %>%
visSave(paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
# Plays and network colors
playlist <- c("Much Ado About Nothing","The Tempest","Romeo and Juliet", "Hamlet", "Macbeth", "Merchant of Venice")
colors <- c("Reds", "Blues", "Purples", "Oranges", "Greens", "Greys")
play_data <-vector("list", 6)
# Process all data
for (i in seq(length(playlist))) {
print(playlist[i])
play_data[[i]] <- process_play(playlist[i], colors[i])
}
# Draw and save all graphs
for (i in seq(length(playlist))) {
print(playlist[i])
data <- play_data[[i]]
g <- draw(playlist[i], data$nodes, data$edges, "layout_with_lgl", colors[i])
print(g)
}
# Draw graph
draw <- function(play, nodes, edges, layout, color) {
palette <- brewer.pal(8, color)
g <- visNetwork(nodes, edges,
width="100%",
main=list(text=paste("Shakespeare's ", play,
": a network visualization", sep=""),
style=paste("font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;color:", palette[8], ";", sep="")
)) %>%
visNodes(shadow = list(enabled = TRUE, size = 20),
font=list(color=greys[7], face='georgia'),
scaling=list(max=60,
min=10,
label=list(enabled=TRUE,
drawThreshold=10,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE, scaling=list(max=15, min=1),selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE, hover=TRUE))
visSave(g, paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
# Plays and network colors
playlist <- c("Much Ado About Nothing","The Tempest","Romeo and Juliet", "Hamlet", "Macbeth", "Merchant of Venice")
colors <- c("Reds", "Blues", "Purples", "Oranges", "Greens", "Greys")
play_data <-vector("list", 6)
# Process all data
for (i in seq(length(playlist))) {
print(playlist[i])
play_data[[i]] <- process_play(playlist[i], colors[i])
}
# Draw and save all graphs
for (i in seq(length(playlist))) {
print(playlist[i])
data <- play_data[[i]]
g <- draw(playlist[i], data$nodes, data$edges, "layout_with_lgl", colors[i])
print(g)
}
# Draw graph
draw <- function(play, nodes, edges, layout, color) {
palette <- brewer.pal(8, color)
g <- visNetwork(nodes, edges,
width="100%",
main=list(text=paste("Shakespeare's ", play,
": a network visualization", sep=""),
style=paste("font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;color:", palette[8], ";", sep="")
)) %>%
visNodes(shadow = list(enabled = TRUE, size = 20),
font=list(color=greys[7], face='georgia'),
scaling=list(max=60,
min=10,
label=list(enabled=TRUE,
drawThreshold=5,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE, scaling=list(max=15, min=1),selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE, hover=TRUE))
visSave(g, paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
# Draw and save all graphs
for (i in seq(length(playlist))) {
print(playlist[i])
data <- play_data[[i]]
g <- draw(playlist[i], data$nodes, data$edges, "layout_with_lgl", colors[i])
print(g)
}
# Draw graph
draw <- function(play, nodes, edges, layout, color) {
palette <- brewer.pal(8, color)
g <- visNetwork(nodes, edges,
width="100%",
main=list(text=paste("Shakespeare's ", play,
": a network visualization", sep=""),
style=paste("font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;color:", palette[8], ";", sep="")
)) %>%
visNodes(shadow = list(enabled = TRUE, size = 20),
font=list(color=greys[7], face='georgia'),
scaling=list(max=60,
min=10,
label=list(enabled=TRUE,
drawThreshold=10,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE, scaling=list(max=15, min=1),selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE, hover=TRUE))
visSave(g, paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
# Draw and save all graphs
for (i in seq(length(playlist))) {
print(playlist[i])
data <- play_data[[i]]
g <- draw(playlist[i], data$nodes, data$edges, "layout_with_lgl", colors[i])
print(g)
}
# Draw graph
draw <- function(play, nodes, edges, layout, color) {
palette <- brewer.pal(8, color)
g <- visNetwork(nodes, edges,
width="100%",
main=list(text=paste("Shakespeare's ", play,
": a network visualization", sep=""),
style=paste("font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;color:", palette[8], ";", sep="")
)) %>%
visNodes(shadow = list(enabled = TRUE, size = 20),
font=list(color=greys[7], face='georgia'),
color = list(border = palette[8]),
scaling=list(max=60,
min=10,
label=list(enabled=TRUE,
drawThreshold=10,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE, scaling=list(max=15, min=1),selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE, hover=TRUE))
visSave(g, paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
# Process all data
for (i in seq(length(playlist))) {
print(playlist[i])
play_data[[i]] <- process_play(playlist[i], colors[i])
}
# Draw and save all graphs
for (i in seq(length(playlist))) {
print(playlist[i])
data <- play_data[[i]]
g <- draw(playlist[i], data$nodes, data$edges, "layout_with_lgl", colors[i])
print(g)
}
process_play <- function(play, color){
# Get color ramp palette
palette <- brewer.pal(8, color)
palette <-colorRampPalette(c(palette[3], palette[6]), alpha=TRUE)
one_play <- players_per_scene %>% filter(Play == play)
#View(one_play)
# We need to constantly set strings as factors as false, otherwise we lose the string data
edges <- data.frame(from=character(), to=character(), value=integer(), stringsAsFactors = FALSE)
compute_interactions <- function(grp, key) {
# We need to leave out scenes with only 1 member because we can't generate interactions from that
if (length(grp$Player)< 2) {
return()
}
# Generate all pairs
pairs <- combn(grp$Player, 2)
# Increment pair value if they exist, else add new pair
for (i in 1: ncol(pairs)){
x <- pairs[1, i]
y <- pairs[2, i]
# We need to check whether it currently exists as (x,y) or (y,x) in edges
a <- subset(edges, from==x & to==y)
b <- subset(edges, from==y & to==x)
if (length(rownames(a)) > 0 | length(rownames(b)) > 0) {
if (length(rownames(a)) > 0) {
b <- a
}
#Add new weight.
# Note we need to use <<- to ensure side effects are real.
edges[rownames(b)[1],"value"] <<- edges[rownames(b)[1],"value"] + 1
} else {
edges <<- rbind(edges, data.frame(from=c(x), to=c(y), value=c(1), stringsAsFactors = FALSE))
}
}
}
one_play %>% group_walk(compute_interactions)
# players_per_scene %>% group_walk(compute_interactions)
# Get unique players list
players <- unique(data.frame(c(edges$from, edges$to), stringsAsFactors = FALSE))[, 1]
# Create nodes df
nodes <- data.frame(id=players, label=players, gender=rep_len(c("M", "F"), length(players)))
# Set node size by degree (number of connected members)
g <-graph_from_data_frame(edges, directed = FALSE)
degrees <- degree(g)
nodes$value <- degrees[match(nodes$id, names(degrees))]
# Set node color by total weight of all edges
total_weight <- strength(g, weights=edges$value)
nodes$total_weight <- total_weight[match(nodes$id, names(total_weight))]
MAX_NODE_WEIGHT = max(nodes$total_weight)
nodes$color <- palette(MAX_NODE_WEIGHT)[nodes$total_weight]
nodes$border <- palette(8)[8]
# Set edge color by weight (width already set via edges$value)
MAX_EDGE_VALUE = max(edges$value)
edges$color <- palette(MAX_EDGE_VALUE)[edges$value]
return(list(edges=edges, nodes=nodes))
}
# Draw graph
draw <- function(play, nodes, edges, layout, color) {
palette <- brewer.pal(8, color)
g <- visNetwork(nodes, edges,
width="100%",
main=list(text=paste("Shakespeare's ", play,
": a network visualization", sep=""),
style=paste("font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;color:", palette[8], ";", sep="")
)) %>%
visNodes(shadow = list(enabled = TRUE, size = 20),
font=list(color=greys[7], face='georgia'),
scaling=list(max=60,
min=10,
label=list(enabled=TRUE,
drawThreshold=10,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE, scaling=list(max=15, min=1),selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE, hover=TRUE))
visSave(g, paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
# Plays and network colors
playlist <- c("Much Ado About Nothing","The Tempest","Romeo and Juliet", "Hamlet", "Macbeth", "Merchant of Venice")
colors <- c("Reds", "Blues", "Purples", "Oranges", "Greens", "Greys")
play_data <-vector("list", 6)
# Process all data
for (i in seq(length(playlist))) {
print(playlist[i])
play_data[[i]] <- process_play(playlist[i], colors[i])
}
# Draw and save all graphs
for (i in seq(length(playlist))) {
print(playlist[i])
data <- play_data[[i]]
g <- draw(playlist[i], data$nodes, data$edges, "layout_with_lgl", colors[i])
print(g)
}
# Draw graph
draw <- function(play, nodes, edges, layout, color) {
palette <- brewer.pal(8, color)
g <- visNetwork(nodes, edges,
width="100%",
main=list(text=paste("Shakespeare's ", play,
": a network visualization", sep=""),
style=paste("font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;color:", palette[8], ";", sep="")
)) %>%
visNodes(shadow = list(enabled = TRUE, size = 30),
font=list(color=greys[7], face='georgia'),
scaling=list(max=60,
min=10,
label=list(enabled=TRUE,
drawThreshold=10,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE, scaling=list(max=15, min=1),selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE, hover=TRUE))
visSave(g, paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
# Plays and network colors
playlist <- c("Much Ado About Nothing","The Tempest","Romeo and Juliet", "Hamlet", "Macbeth", "Merchant of Venice")
colors <- c("Reds", "Blues", "Purples", "Oranges", "Greens", "Greys")
play_data <-vector("list", 6)
# Process all data
for (i in seq(length(playlist))) {
print(playlist[i])
play_data[[i]] <- process_play(playlist[i], colors[i])
}
# Draw and save all graphs
for (i in seq(length(playlist))) {
print(playlist[i])
data <- play_data[[i]]
g <- draw(playlist[i], data$nodes, data$edges, "layout_with_lgl", colors[i])
print(g)
}
process_play <- function(play, color){
# Get color ramp palette
palette <- brewer.pal(8, color)
palette <-colorRampPalette(c(palette[3], palette[6]), alpha=TRUE)
one_play <- players_per_scene %>% filter(Play == play)
#View(one_play)
# We need to constantly set strings as factors as false, otherwise we lose the string data
edges <- data.frame(from=character(), to=character(), value=integer(), stringsAsFactors = FALSE)
compute_interactions <- function(grp, key) {
# We need to leave out scenes with only 1 member because we can't generate interactions from that
if (length(grp$Player)< 2) {
return()
}
# Generate all pairs
pairs <- combn(grp$Player, 2)
# Increment pair value if they exist, else add new pair
for (i in 1: ncol(pairs)){
x <- pairs[1, i]
y <- pairs[2, i]
# We need to check whether it currently exists as (x,y) or (y,x) in edges
a <- subset(edges, from==x & to==y)
b <- subset(edges, from==y & to==x)
if (length(rownames(a)) > 0 | length(rownames(b)) > 0) {
if (length(rownames(a)) > 0) {
b <- a
}
#Add new weight.
# Note we need to use <<- to ensure side effects are real.
edges[rownames(b)[1],"value"] <<- edges[rownames(b)[1],"value"] + 1
} else {
edges <<- rbind(edges, data.frame(from=c(x), to=c(y), value=c(1), stringsAsFactors = FALSE))
}
}
}
one_play %>% group_walk(compute_interactions)
# players_per_scene %>% group_walk(compute_interactions)
# Get unique players list
players <- unique(data.frame(c(edges$from, edges$to), stringsAsFactors = FALSE))[, 1]
# Create nodes df
nodes <- data.frame(id=players, label=players, gender=rep_len(c("M", "F"), length(players)))
# Set node size by degree (number of connected members)
g <-graph_from_data_frame(edges, directed = FALSE)
degrees <- degree(g)
nodes$value <- degrees[match(nodes$id, names(degrees))]
# Set node color by total weight of all edges
total_weight <- strength(g, weights=edges$value)
nodes$total_weight <- total_weight[match(nodes$id, names(total_weight))]
MAX_NODE_WEIGHT = max(nodes$total_weight)
nodes$color <- palette(MAX_NODE_WEIGHT)[nodes$total_weight]
# Set edge color by weight (width already set via edges$value)
MAX_EDGE_VALUE = max(edges$value)
edges$color <- palette(MAX_EDGE_VALUE)[edges$value]
return(list(edges=edges, nodes=nodes))
}
# Draw graph
draw <- function(play, nodes, edges, layout, color) {
palette <- brewer.pal(8, color)
g <- visNetwork(nodes, edges,
width="100%",
main=list(text=paste("Shakespeare's ", play,
": a network visualization", sep=""),
style=paste("font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;color:", palette[8], ";", sep="")
)) %>%
visNodes(shadow = list(enabled = TRUE, size = 30),
font=list(color=greys[7], face='georgia'),
scaling=list(max=60,
min=10,
label=list(enabled=TRUE,
drawThreshold=10,
maxVisible=35,
max=35,
min=10
))) %>%
visEdges(smooth=FALSE, scaling=list(max=10, min=1),selectionWidth=0) %>%
visIgraphLayout(layout=layout, randomSeed=1) %>%
visOptions(highlightNearest=list(enabled=TRUE, hover=TRUE))
visSave(g, paste(play, "-network.html", sep=""), selfcontained = TRUE, background = "white")
return(g)
}
# Plays and network colors
playlist <- c("Much Ado About Nothing","The Tempest","Romeo and Juliet", "Hamlet", "Macbeth", "Merchant of Venice")
colors <- c("Reds", "Blues", "Purples", "Oranges", "Greens", "Greys")
play_data <-vector("list", 6)
# Process all data
for (i in seq(length(playlist))) {
print(playlist[i])
play_data[[i]] <- process_play(playlist[i], colors[i])
}
# Draw and save all graphs
for (i in seq(length(playlist))) {
print(playlist[i])
data <- play_data[[i]]
g <- draw(playlist[i], data$nodes, data$edges, "layout_with_lgl", colors[i])
print(g)
}
# Draw and save all graphs
for (i in seq(length(playlist))) {
print(playlist[i])
data <- play_data[[i]]
g <- draw(playlist[i], data$nodes, data$edges, "layout_with_lgl", colors[i])
print(g)
}
